<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RAG Chat Interface</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(-45deg, #1a202c, #2d3748, #4a5568, #2d3748);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
        }

        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* Custom Scrollbar for a more integrated look */
        #chat-history::-webkit-scrollbar {
            width: 8px;
        }
        #chat-history::-webkit-scrollbar-track {
            background: #2d3748;
        }
        #chat-history::-webkit-scrollbar-thumb {
            background-color: #4a5568;
            border-radius: 10px;
            border: 2px solid #2d3748;
        }

        /* CSS Loading Spinner */
       .spinner {
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #ffffff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Styling for auto-resizing textarea */
        #chat-input {
            resize: none;
            overflow-y: hidden;
        }
        
        /* Collapsible section transition */
       .collapsible-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
        }
    </style>
</head>
<body class="bg-gray-900 text-white flex items-center justify-center min-h-screen p-4">

    <main id="chat-container" class="w-full max-w-3xl bg-gray-800/80 backdrop-blur-sm shadow-2xl rounded-2xl flex flex-col h-[90vh]">
        
        <header class="p-4 border-b border-gray-700">
            <h1 class="text-xl font-bold text-center">Document Assistant</h1>
        </header>

        <div id="chat-history" class="flex-1 p-6 space-y-4 overflow-y-auto">
            </div>

        <div class="p-4 border-t border-gray-700">
            <form id="chat-form" class="flex items-end space-x-3">
                <textarea id="chat-input" rows="1" class="flex-1 p-3 bg-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none transition duration-200" placeholder="Type your message..."></textarea>
                <button id="send-btn" type="submit" class="bg-gradient-to-r from-blue-500 to-blue-600 text-white font-semibold px-6 py-3 rounded-lg shadow-md hover:shadow-lg hover:from-blue-600 hover:to-blue-700 active:scale-95 transition-all duration-200">
                    Send
                </button>
            </form>

            <div id="upload-section" class="mt-4 text-sm">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <div class="flex items-center space-x-2">
                            <input type="file" id="file-input" class="flex-1 block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-green-800 file:text-green-100 hover:file:bg-green-700"/>
                            <button id="upload-file-btn" class="bg-gradient-to-r from-green-500 to-green-600 text-white font-semibold px-4 py-2 rounded-lg shadow-md hover:shadow-lg hover:from-green-600 hover:to-green-700 active:scale-95 transition-all duration-200">Upload File</button>
                        </div>
                        <p id="file-status" class="text-xs mt-1 h-4"></p>
                    </div>
                    <div>
                        <div class="flex items-center space-x-2">
                            <input type="text" id="url-input" class="flex-1 p-2 bg-gray-700 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:outline-none transition duration-200" placeholder="Enter YouTube URL..."/>
                            <button id="upload-url-btn" class="bg-gradient-to-r from-indigo-500 to-indigo-600 text-white font-semibold px-4 py-2 rounded-lg shadow-md hover:shadow-lg hover:from-indigo-600 hover:to-indigo-700 active:scale-95 transition-all duration-200">Upload URL</button>
                        </div>
                        <p id="url-status" class="text-xs mt-1 h-4"></p>
                    </div>
                </div>
            </div>
            
            <div class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-2 text-xs">
                <div class="collapsible-section bg-gray-700/50 rounded-lg">
                    <button class="collapsible-header w-full p-2 flex justify-between items-center font-semibold">Compare <span>&#9660;</span></button>
                    <div class="collapsible-content p-2 text-gray-400"> (Functionality to be implemented) </div>
                </div>
                <div class="collapsible-section bg-gray-700/50 rounded-lg">
                    <button class="collapsible-header w-full p-2 flex justify-between items-center font-semibold">Convert <span>&#9660;</span></button>
                    <div class="collapsible-content p-2 text-gray-400"> (Functionality to be implemented) </div>
                </div>
                <div class="collapsible-section bg-gray-700/50 rounded-lg">
                    <button class="collapsible-header w-full p-2 flex justify-between items-center font-semibold">Documents <span>&#9660;</span></button>
                    <div class="collapsible-content p-2 text-gray-400"> (Functionality to be implemented) </div>
                </div>
                <div class="collapsible-section bg-gray-700/50 rounded-lg">
                    <button class="collapsible-header w-full p-2 flex justify-between items-center font-semibold">Audio <span>&#9660;</span></button>
                    <div class="collapsible-content p-2 text-gray-400"> (Functionality to be implemented) </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- Configuration ---
            const API_BASE_URL = 'http://localhost:8000';

            // --- DOM Element Caching ---
            const chatHistory = document.getElementById('chat-history');
            const chatForm = document.getElementById('chat-form');
            const chatInput = document.getElementById('chat-input');
            const fileInput = document.getElementById('file-input');
            const urlInput = document.getElementById('url-input');
            const uploadFileBtn = document.getElementById('upload-file-btn');
            const uploadUrlBtn = document.getElementById('upload-url-btn');
            const fileStatus = document.getElementById('file-status');
            const urlStatus = document.getElementById('url-status');

            // --- Helper Functions ---

            /**
             * Scrolls the chat history to the bottom.
             */
            const autoScroll = () => {
                chatHistory.scrollTop = chatHistory.scrollHeight;
            };

            /**
             * Adds a message bubble to the chat history.
             * @param {string} text - The message content.
             * @param {'user' | 'bot'} sender - The sender of the message.
             * @returns {HTMLElement} The created message element.
             */
            const addMessageToChat = (text, sender) => {
                const messageElement = document.createElement('div');
                const bubble = document.createElement('div');
                
                messageElement.classList.add('flex', sender === 'user'? 'justify-end' : 'justify-start');
                bubble.classList.add('max-w-md', 'px-4', 'py-3', 'rounded-2xl', 'shadow');
                
                if (sender === 'user') {
                    bubble.classList.add('bg-blue-600', 'text-white');
                } else {
                    bubble.classList.add('bg-gray-600', 'text-white');
                }
                
                bubble.innerText = text;
                messageElement.appendChild(bubble);
                chatHistory.appendChild(messageElement);
                autoScroll();
                return bubble;
            };

            /**
             * Displays a loading spinner inside a bot message bubble.
             * @param {HTMLElement} botMessageElement - The bot message bubble element.
             */
            const showLoadingIndicator = (botMessageElement) => {
                botMessageElement.innerHTML = ''; // Clear any previous text
                const spinner = document.createElement('div');
                spinner.classList.add('spinner');
                botMessageElement.appendChild(spinner);
                autoScroll();
            };

            /**
             * Updates the status message for file or URL uploads.
             * @param {'file' | 'url'} type - The type of upload.
             * @param {string} message - The status message to display.
             * @param {boolean} isError - True if the message is an error.
             */
            const updateUploadStatus = (type, message, isError = false) => {
                const statusElement = type === 'file'? fileStatus : urlStatus;
                statusElement.textContent = message;
                statusElement.className = `text-xs mt-1 h-4 ${isError? 'text-red-400' : 'text-green-400'}`;
                setTimeout(() => statusElement.textContent = '', 5000); // Clear after 5s
            };

            // --- API Communication ---

            /**
             * Sends a query to the backend and displays the response.
             * @param {string} text - The user's query.
             */
            const handleQuery = async (text) => {
                addMessageToChat(text, 'user');
                const botMessageElement = addMessageToChat('', 'bot');
                showLoadingIndicator(botMessageElement);

                try {
                    const response = await fetch(`${API_BASE_URL}/query/query`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ text }),
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }

                    const data = await response.json();
                    botMessageElement.innerText = data.response;

                } catch (error) {
                    console.error('Query Error:', error);
                    botMessageElement.innerText = 'Sorry, I encountered an error. Please try again.';
                    botMessageElement.classList.add('bg-red-500');
                } finally {
                    autoScroll();
                }
            };
            
            /**
             * Handles file upload to the backend.
             */
            const handleFileUpload = async () => {
                const file = fileInput.files;
                if (!file) {
                    updateUploadStatus('file', 'Please select a file first.', true);
                    return;
                }

                const formData = new FormData();
                formData.append('file', file);
                
                updateUploadStatus('file', 'Uploading...');

                try {
                    const response = await fetch(`${API_BASE_URL}/upload/uploadfile`, {
                        method: 'POST',
                        body: formData,
                        // NOTE: Do NOT set 'Content-Type' header manually for FormData.
                        // The browser will do it automatically with the correct boundary.
                    });

                    if (!response.ok) {
                        throw new Error(`Upload failed. Status: ${response.status}`);
                    }
                    
                    const data = await response.json();
updateUploadStatus('file', data.message + ` Uploaded: ${data.filename}`);
                    fileInput.value = ''; // Reset file input

                } catch (error) {
                    console.error('File Upload Error:', error);
                    updateUploadStatus('file', 'Upload failed. See console for details.', true);
                }
            };

            /**
             * Handles URL upload to the backend.
             */
            const handleUrlUpload = async () => {
                const url = urlInput.value.trim();
                if (!url) {
                    updateUploadStatus('url', 'Please enter a URL first.', true);
                    return;
                }

                updateUploadStatus('url', 'Uploading URL...');

                try {
                    const response = await fetch(`${API_BASE_URL}/upload/uploadurl`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ url }),
                    });
                    
                    if (!response.ok) {
                        throw new Error(`Upload failed. Status: ${response.status}`);
                    }

                    const data = await response.json();
updateUploadStatus('url', `${data.message} | URL processed: ${data.url}`);
                    urlInput.value = ''; // Reset URL input

                } catch (error) {
                    console.error('URL Upload Error:', error);
                    updateUploadStatus('url', 'Upload failed. See console for details.', true);
                }
            };

            // --- Event Listeners ---

            // Handle chat form submission
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const userText = chatInput.value.trim();
                if (userText) {
                    handleQuery(userText);
                    chatInput.value = '';
                    chatInput.style.height = 'auto'; // Reset height
                }
            });

            // Auto-resize textarea
            chatInput.addEventListener('input', () => {
                chatInput.style.height = 'auto';
                chatInput.style.height = `${chatInput.scrollHeight}px`;
            });

            // Handle upload button clicks
            uploadFileBtn.addEventListener('click', handleFileUpload);
            uploadUrlBtn.addEventListener('click', handleUrlUpload);

            // Handle collapsible sections
            document.querySelectorAll('.collapsible-header').forEach(header => {
                header.addEventListener('click', () => {
                    const content = header.nextElementSibling;
                    const arrow = header.querySelector('span');
                    
                    if (content.style.maxHeight) {
                        content.style.maxHeight = null;
                        arrow.style.transform = 'rotate(0deg)';
                    } else {
                        content.style.maxHeight = content.scrollHeight + "px";
                        arrow.style.transform = 'rotate(180deg)';
                    }
                });
            });

            // --- Initial State ---
            addMessageToChat("Hello! How can I assist you with your documents today?", 'bot');
        });
    </script>
</body>
</html>